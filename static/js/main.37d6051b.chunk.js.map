{"version":3,"sources":["logo.svg","firebase/firebase.utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","App","useState","user","setUser","unsubscribeFromAuth","useEffect","onAuthStateChanged","a","displayName","collection","get","then","querySnapshot","forEach","doc","console","log","id","data","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,uKCcpCC,G,YAAMC,IAASC,cAVP,CACXC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,gBACnBC,MAAO,gDAKIC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,UAAUX,GAEtCY,EAAW,IAAIX,IAASS,KAAKG,mBACnCD,EAASE,oBAAoB,CAACC,OAAQ,mBAE/B,IAAMC,EAAmB,kBAAMN,EAAKO,gBAAgBL,IAE5CX,EAAf,ECoCaiB,MArDf,WAAgB,IAAD,EACWC,mBAAS,SADpB,mBACNC,EADM,KACAC,EADA,KAETC,EAAsB,KAuC1B,OAtCAC,qBAAU,WAiCR,OAhCAD,EAAsBZ,EAAKc,mBAAL,+BAAAC,EAAA,MAAwB,WAAOL,GAAP,SAAAK,EAAA,sDAE5CJ,EAAQD,EAAKM,aAEbf,EACGgB,WAAW,WACXC,MACAC,MAAK,SAACC,GACLA,EAAcC,SAAQ,SAACC,GACrBC,QAAQC,IAAIF,EAAIG,GAAIH,EAAII,cAI5BzB,EACCgB,WAAW,qBACXC,MACAC,MAAK,SAACC,GACLA,EAAcC,SAAQ,SAACC,GACrBC,QAAQC,IAAIF,EAAIG,GAAIH,EAAII,cAlBc,2CAAxB,uDAgCf,WACLd,OAED,IAGD,yBAAKe,UAAU,OACb,4BAAQA,UAAU,cAChB,uCAAajB,GAEf,4BAAQkB,QAAStB,GAAjB,2BCzCcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.37d6051b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDW_zMesDfN3E2nIwFY53ghN5s_Kf57YfI\",\r\n    authDomain: \"gncmembers-b6908.firebaseapp.com\",\r\n    databaseURL: \"https://gncmembers-b6908.firebaseio.com\",\r\n    projectId: \"gncmembers-b6908\",\r\n    storageBucket: \"gncmembers-b6908.appspot.com\",\r\n    messagingSenderId: \"1095855812949\",\r\n    appId: \"1:1095855812949:web:9d6ca6a484c686aa787fdc\",\r\n  };\r\n  // Initialize Firebase\r\n const app = firebase.initializeApp(config);\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore(app);\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({prompt: 'select_account'});\r\n\r\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\n  export default firebase;","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { signInWithGoogle } from \"./firebase/firebase.utils\";\n\nimport { auth, firestore } from \"./firebase/firebase.utils\";\n\nfunction App() {\n  const [user, setUser] = useState(\"Guest\");\n  let unsubscribeFromAuth = null;\n  useEffect(() => {\n    unsubscribeFromAuth = auth.onAuthStateChanged(async (user) => {\n      //console.log(user);\n      setUser(user.displayName);\n\n      firestore\n        .collection(\"members\")\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.forEach((doc) => {\n            console.log(doc.id, doc.data());\n          });\n        });\n\n        firestore\n        .collection(\"members/406/years\")\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.forEach((doc) => {\n            console.log(doc.id, doc.data());\n          });\n        });\n\n      //  members.get().then(function(doc) {\n      //    // if (doc.exists) {\n      //         console.log(\"Document data:\", doc);\n      //     // } else {\n      //     //     // doc.data() will be undefined in this case\n      //     //     console.log(\"No such document!\");\n      //     // }\n      //   })\n    });\n\n    return function cleanup() {\n      unsubscribeFromAuth();\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Welcome {user}</h2>\n         \n      <button onClick={signInWithGoogle}>SIGN IN WITH GOOGLE </button>\n       \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}